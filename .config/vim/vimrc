" All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
runtime! archlinux.vim

let mapleader=","

set nocompatible
set number relativenumber
set encoding=utf-8
set hidden
set wildmode=longest,list,full
set splitbelow splitright
set showcmd
set hlsearch
set autochdir
set formatoptions-=tc

python3 import pynvim
if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    "     " render properly when inside 256-color tmux and GNU screen.
    "         " see also https://sunaku.github.io/vim-256color-bce.html
    set t_ut=
endif

let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
colorscheme ron
set t_Co=256                         " Enable 256 colors
" set termguicolors                    " Enable GUI colors for the terminal to get truecolor



map <leader>o :setlocal spell! spelllang=en_gb<CR>
vnoremap <C-c> "+y
map <C-p> "+P

"colo ron
syntax on
filetype indent plugin on
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
set rtp+=/usr/share/fzf
" Have a NERDtree-like netrw experience
let g:netrw_banner = 0
let g:netrw_liststyle = 3
"let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 15
let g:netrw_keepdir= 0
let g:netrw_bufsettings="noma nomod nonu nobl nowrap ro rnu"
"autocmd BufEnter * silent! lcd %:p:h
"autocmd FileType netrw nnoremap qq :bd<CR>
"augroup ProjectDrawer
"      autocmd!
"        autocmd VimEnter * :Vexplore
"    augroup END

set statusline=
set statusline+=%#PMenuSel#
set statusline+=%#LineNr#
set statusline+=\ %F
set statusline+=%m\
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %k
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\

"%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ [BUFFER=%n]\ %{strftime('%c')}


" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase
 
" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start
 
" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline
 
" Display the cursor position on the last line of the screen or in the status
" line of a window
" set ruler
 
" Always display the status line, even if only one window is displayed
set laststatus=2
 
" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm
 
" Use visual bell instead of beeping when doing something wrong
set visualbell
" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=""
 
" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$
 
" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Use persistent history.
if !isdirectory("/tmp/.vim-undo-dir")
    call mkdir("/tmp/.vim-undo-dir", "", 0700)
endif
set undodir=/tmp/.vim-undo-dir
set undofile

" Clean home-directory
set undodir=$XDG_CACHE_HOME/vim/undo
set directory=$XDG_CACHE_HOME/vim/swap
set backupdir=$XDG_CACHE_HOME/vim/backup
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
set packpath=$XDG_DATA_HOME/vim


" GENERAL Mappings
" :command W w

inoremap <leader><leader> <Esc>/<++><Enter>"_c4l
vnoremap <leader><leader> <Esc>/<++><Enter>"_c4l
vnoremap ( c(<C-r><C-o>")<Esc>
vnoremap ) c( <C-r><C-o>" )<Esc>
vnoremap [ c[<C-r><C-o>"]<Esc>
vnoremap ] c[ <C-r><C-o>" ]<Esc>
vnoremap { c{<C-r><C-o>"}<Esc>
vnoremap } c{ <C-r><C-o>" }<Esc>
vnoremap < c<<C-r><C-o>"><Esc>
vnoremap > c< <C-r><C-o>" ><Esc>
vnoremap " c"<C-r><C-o>""<Esc>
nnoremap <leader>" I" <Esc>
nnoremap <leader># I# <Esc>
map <leader><leader> <Esc>/<++><Enter>"_c4l

"au BufRead /tmp/mutt-* set tw=72


" PLUGINS
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
nnoremap <Leader>gy :Goyo<CR>
let g:goyo_linenr = 1
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_paragraph_span = 2
let g:deoplete#enable_at_startup = 1

" This is new style
"
"call deoplete#custom#var('omni', 'input_patterns', {
"        \ 'tex': g:vimtex#re#deoplete
"        \})


" LATEX Mappings

autocmd BufRead,BufNewFile *.tex set filetype=tex
autocmd BufRead,BufNewFile *.cls set filetype=tex
autocmd BufRead,BufNewFile *.bib set filetype=tex
:map <F5> :!xelatex %<CR>
:map <F6> :!biber %:r<CR>
:map <F7> :!xelatex % && biber %:r && xelatex % && xelatex %<CR>
:map <F8> :!zathura %:r.pdf<CR>

autocmd FileType tex let g:vimtex#re#deoplete
autocmd FileType tex map <leader>w :w !detex \| wc -w<CR>
autocmd FileType tex setlocal spell spelllang=en_gb

autocmd FileType tex inoremap ,f \begin{figure}[h]<Enter>\centering<Enter>\includegraphics[width=]{<++>}<Enter>\caption{<++>}<Enter>\label{fig:<++>}<Enter>\end{figure}<Enter><Enter><++><Esc>5kf]i
autocmd FileType tex inoremap ,t \begin{table}[h]<Enter>\centering<Enter>\caption{}<Enter>\label{tab:<++>}<Enter>\begin{tabularx}{<++>}<Enter><++><Enter>\end{tabularx}<Enter>\end{table}<Enter><Enter><++><Esc>7kf}i
autocmd FileType tex inoremap ,e \begin{equation}<Space>\label{eq:}<Enter><++><Enter>\end{equation}<Enter><Enter><++><Esc>4k$i
autocmd FileType tex inoremap ,ce \begin{center}<Enter><Enter>\end{center}<Enter><Enter><++><Esc>3kA


autocmd FileType tex inoremap ,bf \textbf{}<Space><++><Esc>T{i
autocmd FileType tex inoremap ,it \textit{}<Space><++><Esc>T{i
autocmd FileType tex inoremap ,ch \chapter{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,sc \section{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,ssc \subsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,sssc \subsubsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap ,ci ~\cite{}<++><Esc>T{i
autocmd FileType tex inoremap ,rs \secref{}<++><Esc>4hi
autocmd FileType tex inoremap ,rf \figref{}<++><Esc>4hi
autocmd FileType tex inoremap ,rt \tabref{}<++><Esc>4hi
autocmd FileType tex inoremap ,re \equref{}<++><Esc>4hi
autocmd FileType tex inoremap ,st <Esc>F{i*<Esc>$i
autocmd FileType tex inoremap ,si \SI{}{<++>}<++><Esc>10hi
autocmd FileType tex inoremap ,up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i

autocmd FileType tex vnoremap ,i c\textit{<C-r><C-o>"}<Esc>
autocmd FileType tex vnoremap ,b c\textbf{<C-r><C-o>"}<Esc>
autocmd FileType tex vnoremap ,^ c\textsuperscript{<C-r><C-o>"}<Esc>
autocmd FileType tex vnoremap ,_ c\textsubscript{<C-r><C-o>"}<Esc>
autocmd FileType tex vnoremap ,$ c$<C-r><C-o>"$<Esc>

autocmd FileType tex nnoremap ,c I% <Esc>

" Python Mappings

let python_highlight_all=1
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhiteSpace /\s\+$/
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set textwidth=79
    \ set fileformat=unix
